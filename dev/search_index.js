var documenterSearchIndex = {"docs":
[{"location":"frameworks/tempo/abstract_tempo/#Tempo-Versions","page":"Tempo Versions","title":"Tempo Versions","text":"","category":"section"},{"location":"frameworks/tempo/abstract_tempo/#Abstract-Tempo-Version","page":"Tempo Versions","title":"Abstract Tempo Version","text":"","category":"section"},{"location":"frameworks/tempo/abstract_tempo/","page":"Tempo Versions","title":"Tempo Versions","text":"text text text","category":"page"},{"location":"frameworks/tempo/abstract_tempo/","page":"Tempo Versions","title":"Tempo Versions","text":"AbstractTempoVersion\nget_tempo_command(::AbstractTempoVersion)","category":"page"},{"location":"frameworks/tempo/abstract_tempo/#GravityToolsLight.AbstractTempoVersion","page":"Tempo Versions","title":"GravityToolsLight.AbstractTempoVersion","text":"AbstractTempoVersion\n\nAn abstract type that serves as a base for different implementations of Tempo versions. Implementations must define the get_tempo_command function.\n\n\n\n\n\n","category":"type"},{"location":"frameworks/tempo/abstract_tempo/#GravityToolsLight.get_tempo_command-Tuple{AbstractTempoVersion}","page":"Tempo Versions","title":"GravityToolsLight.get_tempo_command","text":"get_tempo_command(tempo_version::AbstractTempoVersion)\n\nObtain the command line call string for the specified Tempo version. This function must be implemented for each specific subtype of AbstractTempoVersion.\n\n\n\n\n\n","category":"method"},{"location":"frameworks/tempo/abstract_tempo/#Tempo","page":"Tempo Versions","title":"Tempo","text":"","category":"section"},{"location":"frameworks/tempo/abstract_tempo/","page":"Tempo Versions","title":"Tempo Versions","text":"Tempo\nget_tempo_directory\nget_tempo_command(::Tempo)","category":"page"},{"location":"frameworks/tempo/abstract_tempo/#GravityToolsLight.Tempo","page":"Tempo Versions","title":"GravityToolsLight.Tempo","text":"Tempo(custom_data_directory::String = get_tempo_directory())\n\nA structure representing the original Tempo version with an optional custom data directory. If no directory is provided, the default is retrieved from the TEMPO environment variable.\n\nConstructors\n\nTempo(): Uses the default directory path from TEMPO environment variable.\nTempo(custom_dir::String): Uses a custom directory specified by custom_dir.\n\n\n\n\n\n","category":"type"},{"location":"frameworks/tempo/abstract_tempo/#GravityToolsLight.get_tempo_directory","page":"Tempo Versions","title":"GravityToolsLight.get_tempo_directory","text":"get_tempo_directory() -> String\n\nRetrieve the default directory path for Tempo from the TEMPO environment variable. If the variable is not set, it returns a predefined default path.\n\n\n\n\n\n","category":"function"},{"location":"frameworks/tempo/abstract_tempo/#GravityToolsLight.get_tempo_command-Tuple{Tempo}","page":"Tempo Versions","title":"GravityToolsLight.get_tempo_command","text":"get_tempo_command(tempo_version::Tempo) -> String\n\nReturns the command line call string for the original Tempo version.\n\n\n\n\n\n","category":"method"},{"location":"frameworks/tempo/abstract_tempo/#Tempo2","page":"Tempo Versions","title":"Tempo2","text":"","category":"section"},{"location":"frameworks/tempo/abstract_tempo/","page":"Tempo Versions","title":"Tempo Versions","text":"Tempo2\nget_tempo2_directory\nget_tempo_command(::Tempo2)","category":"page"},{"location":"frameworks/tempo/abstract_tempo/#GravityToolsLight.Tempo2","page":"Tempo Versions","title":"GravityToolsLight.Tempo2","text":"Tempo2(custom_data_directory::String = get_tempo2_directory())\n\nA structure representing the Tempo2 version with an optional custom data directory. If no directory is provided, the default is retrieved from the TEMPO2 environment variable.\n\nConstructors\n\nTempo2(): Uses the default directory path from TEMPO2 environment variable.\nTempo2(custom_dir::String): Uses a custom directory specified by custom_dir.\n\n\n\n\n\n","category":"type"},{"location":"frameworks/tempo/abstract_tempo/#GravityToolsLight.get_tempo2_directory","page":"Tempo Versions","title":"GravityToolsLight.get_tempo2_directory","text":"get_tempo2_directory() -> String\n\nRetrieve the default directory path for Tempo2 from the TEMPO2 environment variable. If the variable is not set, it returns a predefined default path.\n\n\n\n\n\n","category":"function"},{"location":"frameworks/tempo/abstract_tempo/#GravityToolsLight.get_tempo_command-Tuple{Tempo2}","page":"Tempo Versions","title":"GravityToolsLight.get_tempo_command","text":"get_tempo_command(tempo_version::Tempo2) -> String\n\nReturns the command line call string for the Tempo2 version.\n\n\n\n\n\n","category":"method"},{"location":"#GravityToolsLight-Documentation","page":"Home","title":"GravityToolsLight Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"\"# GravityToolsLight Documentation\n\nWelcome to the documentation for `GravityToolsLight`, a Julia library aimed at facilitating the analysis of pulsar timing for gravitational studies. This library provides a set of tools for running `tempo` and `tempo2`, handling Post-Keplerian parameters, and performing grid-based analyses with adaptive refinement.\n\n## Introduction\n\n`GravityToolsLight` is designed to be a comprehensive toolkit for astronomers and physicists who need to perform precise timing analyses of pulsars. It offers a range of functionalities from basic timing to advanced model fitting and parameter estimation.\n\n## Installation\n\nTo install `GravityToolsLight`, use the Julia package manager:\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg Pkg.add(\"GravityToolsLight\") ```","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here's how to get started with GravityToolsLight:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using GravityToolsLight","category":"page"},{"location":"#Example-of-basic-usage","page":"Home","title":"Example of basic usage","text":"","category":"section"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"#GeneralTempoFramework","page":"Home","title":"GeneralTempoFramework","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Manage parameter files for tempo and tempo2.\nExecute timing analysis with comprehensive fitting procedures.","category":"page"},{"location":"#GeneralPKFramework","page":"Home","title":"GeneralPKFramework","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Work with Post-Keplerian parameters for theoretical gravity tests.\nCompare measured values with predictions from various gravitational theories.","category":"page"},{"location":"#AdaptiveRefinement2DGrid","page":"Home","title":"AdaptiveRefinement2DGrid","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Perform adaptive refinement on a two-dimensional grid of parameters.\nUtilize single-threaded or parallel computing environments for grid exploration.","category":"page"},{"location":"#Combined-Frameworks","page":"Home","title":"Combined Frameworks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Integrate Tempo and PK methods for enhanced analysis workflows.\nConduct grid searches and optimize parameter estimation.","category":"page"},{"location":"#Usage-Examples","page":"Home","title":"Usage Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here are some common usage scenarios for GravityToolsLight:","category":"page"},{"location":"#Running-Tempo-Analysis","page":"Home","title":"Running Tempo Analysis","text":"","category":"section"},{"location":"#Code-example-for-running-a-Tempo-analysis","page":"Home","title":"Code example for running a Tempo analysis","text":"","category":"section"},{"location":"#Post-Keplerian-Parameter-Estimation","page":"Home","title":"Post-Keplerian Parameter Estimation","text":"","category":"section"},{"location":"#Code-example-for-Post-Keplerian-parameter-estimation","page":"Home","title":"Code example for Post-Keplerian parameter estimation","text":"","category":"section"},{"location":"#Code-example-for-adaptive-grid-refinement","page":"Home","title":"Code example for adaptive grid refinement","text":"","category":"section"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We welcome contributions to GravityToolsLight! If you'd like to contribute, please fork the repository, make your changes, and submit a pull request.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GravityToolsLight is released under the MIT License. See the LICENSE file for more details.\"","category":"page"}]
}
